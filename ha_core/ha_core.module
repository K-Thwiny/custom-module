<?php

/**
 * Implements hook_entity_info().
 */
function ha_core_entity_info() {
  $info = array();

  $info['ha_core_note'] = array(
    'label' => t('Note'),
    'entity class' => 'Entity',
    'controller class' => 'HACoreNoteController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'ha_core_note',
    'uri callback' => 'ha_core_note_uri',
    'access callback' => 'ha_core_note_access',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'bundles' => array(
      'ha_core_note' => array(
        'label' => 'Note',
        'admin' => array(
          'path' => 'admin/structure/ha_core_note/manage',
          'access arguments' => array('administer ha_core_notes'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Note'),
        'custom settings' => FALSE,
      ),
    ),
  );
  $info['ha_core_note']['inline entity form'] = array(
    'controller' => 'HACoreNoteInlineEntityFormController',
  );

  return $info;
}

/**
 * Implements callback_entity_info_uri().
 */
function ha_core_note_uri($note){
  return array(
    'path' => 'ha_core_note/' . $note->id,
  );
}

/**
 * Note entity access callback.
 */
function ha_core_note_access($op, $entity, $account, $entity_type) {
  return TRUE;
}

/**
 * Load a single record.
 *
 * @param $id
 *    The id representing the record we want to load.
 */
function ha_core_load($id = NULL, $reset = FALSE){
  $ids = (isset ($id) ? array($id) : array());
  $note = ha_core_load_multiple($ids, $reset);
  return $note ? reset ($note) : FALSE;
}

/**
 * Load multiple records.
 */ 
function ha_core_load_multiple($ids = array(), $conditions = array(), $reset = FALSE){
  return entity_load('ha_core_note', $ids, $conditions, $reset);
}

/**
 * Implements hook_permission().
 */
function ha_core_permission(){
  return array(
    'administer ha_core_notes' =>  array(
      'title' => t('Administer Notes'),
    ),
    'view ha_core_notes' => array(
      'title' => t('View Notes'),
    ),
    'create ha_core_notes' => array(
      'title' => t('Create Notes'),
    ),
  );
}
 
/**
 * Callback for managing Note structure.
 */ 
function ha_core_note_info() {
  return ('Administration page for Notes.');
}

/**
 * Callback for viewing a Note.
 */  
function ha_core_note_page_view($id){
  $notes = entity_load('ha_core_note', array($id));
  $note = $notes[$id];

  drupal_set_title('Note ' . $note->id);
  $output = entity_view('ha_core_note', array($note));

  return $output;
}
 
/**
 * Implements hook_field_extra_fields().
 */
function ha_core_field_extra_fields() {
  $return['ha_core_note']['ha_core_note'] = array(
    'form' => array(
      'body' => array(
        'label' => t('Body'),
        'description' => t('Note Body'),
        'weight' => -10,
      ),
      'date' => array(
        'label' => t('Date'),
        'description' => t('Note last modified date'),
        'weight' => -9,
      ),
    ),
  );
 
  return $return;
}

/**
 * Callback for adding a Note.
 */ 
function ha_core_note_add() {
  $note['body'] = '';
  $note['date'] = '';
    
  return drupal_get_form('ha_core_note_add_form', $note);
}
 
/**
 * Form builder; the Note add form.
 *
 * @ingroup forms
 */ 
function ha_core_note_add_form($form, &$form_state, $note) {
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  field_attach_form('ha_core_note', $note, $form, $form_state);
  
  return $form;
}

/**
 * Validation handler for the Note add form.
 */
function ha_core_note_add_form_validate($form, &$form_state) {
  $note_submission = (object) $form_state['values'];
  field_attach_form_validate('ha_core_note', $note_submission, $form, $form_state);
}

/**
 * Submit handler for the Note add form.
 */ 
function ha_core_note_add_form_submit($form, &$form_state) {
  $note_submission = (object) $form_state['values'];
  field_attach_submit('ha_core_note', $note_submission, $form, $form_state);
  $id = ha_core_note_save($note_submission);
  $form_state['redirect'] = "ha_core_note/$id";
}

/**
 * Saves Note to database.
 */
function ha_core_note_save(&$note) {
  return entity_get_controller('ha_core_note')->save($note);
}

class HACoreNoteController extends EntityAPIController {

  /**
   * Override the entity save method.
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {
    $entity->date = REQUEST_TIME;
  
    parent::save($entity, $transaction);
  
    return $entity->id;
  }

  /**
   * Override the entity buildContent method.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);

    $build['body'] = array(
      '#type' => 'markup',
      '#markup' => check_plain($entity->body),
      '#prefix' => '<div>',
      '#suffix' => '</div>',
    );
    $build['date'] = array(
      '#type' => 'markup',
      '#markup' => date(DATE_COOKIE, check_plain($entity->date)),
      '#prefix' => '<span>Last Modified Date: ',
      '#suffix' => '</span>',
    );

    return $build;
  }
}

/*  
 * Implementation of hook_menu()  
 */  
function ha_core_menu() {  
  // desired path location
  $items['admin/config/system/ha_settings'] = array(  
    // page title  
    'title' => 'Homepage Settings',  
    // describe the page for the menu system.  site visitors will not see this  
    'description' => 'Staff configurable page with custom settings form.',  
    // function that is called when visiting the new path to generate the page's content  
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ha_core_settings_form'),
    // permissions required to view page  
    'access arguments' => array('administer site configuration'),  
  );
  $items['admin/structure/ha_core_note/manage'] = array(
    'title' => 'Note Admin',
    'description' => 'Manage Note structure',
    'page callback' => 'ha_core_note_info',
    'access arguments' => array('administer notes'),
  );
  $items['ha_core_note/%'] = array(
    'page callback' => 'ha_core_note_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view ha_core_notes'),
    'type' => MENU_CALLBACK,
  );
  $items['ha_core_note/add'] = array(
    'title' => 'Add Note!',
    'page callback' => 'ha_core_note_add',
    'access arguments' => array('create ha_core_notes'),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;  
}  

/**
* Page callback: Custom settings form
*/
  function ha_core_settings_form($form, &$form_state) {
  $form['ha_block_1_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Homepage block 1 title"),
    '#default_value' => variable_get('ha_block_1_title', ''),
    '#size' => 50,
    '#maxlength' => 200,
    '#description' => t('The title of the first block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_1_content'] = array(
    '#type' => 'textarea',
    '#title' => t("Homepage block 1 content"),
    '#default_value' => variable_get('ha_block_1_content', ''),
    '#size' => 50,
    '#maxlength' => 1500,
    '#description' => t('The content of the second block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_2_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Homepage block 2 title"),
    '#default_value' => variable_get('ha_block_2_title', ''),
    '#size' => 50,
    '#maxlength' => 200,
    '#description' => t('The title of the first block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_2_content'] = array(
    '#type' => 'textarea',
    '#title' => t("Homepage block 2 content"),
    '#default_value' => variable_get('ha_block_2_content', ''),
    '#size' => 50,
    '#maxlength' => 1500,
    '#description' => t('The content of the second block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_3_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Homepage block 3 title"),
    '#default_value' => variable_get('ha_block_3_title', ''),
    '#size' => 50,
    '#maxlength' => 200,
    '#description' => t('The title of the second block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_3_content'] = array(
    '#type' => 'textarea',
    '#title' => t("Homepage block 3 content"),
    '#default_value' => variable_get('ha_block_3_content', ''),
    '#size' => 50,
    '#maxlength' => 1500,
    '#description' => t('The content of the second block on the homepage'),
    '#required' => TRUE,
  );
  return system_settings_form($form); 
  }

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function ha_core_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Ensure only the desired bundle is being altered 
  foreach ($context['allowed_bundles'] as $bundle) {
    if ($bundle=='ha_core_note') {
      unset($fields['id']);

      $fields['body'] = array(
        'type' => 'property',
        'label' => t('Body'),
        'weight' => 1,
      );
    }
  }
}

/**
 * Implementation of hook_form_alter()
 */
function ha_core_form_alter(&$form, $form_state, $form_id) {
  // If it is a node form, add an after build call 
  if (strpos($form_id, '_node_form') !== FALSE) {
    $form['#after_build'][] = 'ha_core_after_build';
  }

  // If it is a view with proximity filter including country, update country list
  elseif ($form_id == 'views_exposed_form' && isset($form['distance']['country']['#options'])) {
    $form['distance']['country']['#options'] = _countries_serviced();
  }
}

/**
 * Make changes to country field after all fields are rendered
 */
function ha_core_after_build($form_element, &$form_state) {
  // If there is a Location field, update the country list
  if (isset($form_element['locations']['0']['country']['#options'])) {
    $form_element['locations']['0']['country']['#options'] = _countries_serviced();
  }

  return $form_element;
}

/**
 * Returns array of countries serviced by HA Lighting formatted for Location module
 */
function _countries_serviced() {
  return array(
    'pr' => 'Puerto Rico',
    'us' => 'United States',
  );
}
